<?php
// $Id: views_ui.module,v 1.109.6.18 2010/12/24 13:42:00 dereine Exp $
/**
 * @file views_ui.module
 * Provide structure for the administrative interface to Views.
 */

/**
 * Implements hook_menu().
 */
function views_ui_menu() {
  $items = array();

  //module_load_include('inc', 'views_ui', 'includes/admin');

  // Minor code reduction technique.
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer views'),
    'file' => 'includes/admin.inc',
  );

  // Top-level Views module pages (not tied to a particular View).
  $items['admin/structure/views'] = array(
    'title' => 'Views',
    'description' => 'Manage customized lists of content.',
    'page callback' => 'views_ui_list_enabled_views',
  ) + $base;
  $items['admin/structure/views/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1'
  ) + $base;
  $items['admin/structure/views/add'] = array(
    'title' => 'Add new view',
    'page callback' => 'views_ui_add_page',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/templates'] = array(
    'title' => 'Add view from template',
    'page callback' => 'views_ui_list_disabled_views',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  // Copy the "Add view" item so that it will also appear as a local action on
  // the view templates page.
  $items['admin/structure/views/templates/add'] = $items['admin/structure/views/add'];
  $items['admin/structure/views/import'] = array(
    'title' => 'Import view from code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_import_page'),
    'access callback' => 'views_import_access',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;

  $items['admin/structure/views/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_admin_settings_display'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/structure/views/settings/display'] = array(
    'title' => 'Display',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'page arguments' => array('views_ui_admin_settings_display'),
    'weight' => -10,
  ) + $base;
  $items['admin/structure/views/settings/defaults'] = array(
    'title' => 'Defaults',
    'page arguments' => array('views_ui_admin_settings_defaults'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/structure/views/settings/performance'] = array(
    'title' => 'Performance',
    'page arguments' => array('views_ui_admin_settings_performance'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  // The primary Edit View page. Secondary tabs for each Display are added in
  // view_ui_menu_local_tasks_alter().
  $items['admin/structure/views/view/%views_ui_cache'] = array(
    'title callback' => 'views_ui_edit_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_edit_form', 4),
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/edit/ajax'] = array(
    'page callback' => 'views_ui_ajax_get_form',
    'page arguments' => array('views_ui_edit_form', 4),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  ) + $base;

  // Additional pages for acting on a View.
  $items['admin/structure/views/view/%views_ui_cache/analyze'] = array(
    'title' => 'Analyze',
    'page callback' => 'views_ui_analyze_view',
    'page arguments' => array(FALSE, 4),
    // @todo Not sure yet if "Analyze" makes sense as a primary tab. Trying it.
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_export_page', 4),
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/clone'] = array(
    'title' => 'Clone',
    'page callback' => 'views_ui_clone_page',
    'page arguments' => array(4),
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/break-lock'] = array(
    'title' => 'Break lock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_break_lock_confirm', 4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_default/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'views_ui_enable_page',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_default/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'views_ui_disable_page',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_delete_confirm', 4),
    'type' => MENU_CALLBACK,
  ) + $base;

  $items['admin/structure/views/nojs/%/%views_ui_cache'] = array(
    'page callback' => 'views_ui_ajax_form',
    'page arguments' => array(FALSE, 4, 5),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/ajax/%/%views_ui_cache'] = array(
    'page callback' => 'views_ui_ajax_form',
    'page arguments' => array(TRUE, 4, 5),
    'delivery callback' => 'ajax_deliver',
    'type' => MENU_CALLBACK,
  ) + $base;

//  $items['admin/structure/views/nojs/human_name/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('human_name', FALSE, 5),
//  );
//  $items['admin/structure/views/ajax/human_name/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('human_name', TRUE, 5),
//    'delivery callback' => 'views_ui_ajax_deliver',
//  );
//  $items['admin/structure/views/nojs/tag/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('tag', FALSE, 5),
//  );
//  $items['admin/structure/views/ajax/tag/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('tag', TRUE, 5),
//    'delivery callback' => 'views_ui_ajax_deliver',
//  );
//  $items['admin/structure/views/nojs/description/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('description', FALSE, 5),
//  );
//  $items['admin/structure/views/ajax/description/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_edit_details',
//    'page arguments' => array('description', TRUE, 5),
//    'delivery callback' => 'views_ui_ajax_deliver',
//  );
//
//  $items['admin/build/views/nojs/clone-display/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_clone_display',
//    'page arguments' => array(FALSE, 5, 6),
//  );
//
//  $items['admin/build/views/ajax/clone-display/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_clone_display',
//    'page arguments' => array(TRUE, 5, 6),
//    'delivery callback' => 'views_ui_ajax_deliver',
//  );
//
//  $items['admin/structure/views/nojs/%/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_ajax_form',
//    'page arguments' => array(FALSE, 4, 5),
//  );
//  $items['admin/structure/views/ajax/%/%views_ui_cache'] = $callback + array(
//    'page callback' => 'views_ui_ajax_form',
//    'page arguments' => array(TRUE, 4, 5),
//    'delivery callback' => 'views_ui_ajax_deliver',
//  );

  // Autocomplete callback for tagging a View.
  // @todo Are there any other modules relying on this path? If not, change to
  //   'admin/structure/views/ajax/autocomplete/tag'.
  $items['admin/views/ajax/autocomplete/tag'] = array(
    'page callback' => 'views_ui_autocomplete_tag',
    'type' => MENU_CALLBACK,
  ) + $base;

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Adds secondary tabs for navigating across Displays when editing a View. Since
 * each view contains its own set of displays, doing this here instead of in
 * hook_menu() reduces bloat in the {menu_links} table, and avoids requiring a
 * menu rebuild every time a display is added or removed.
 */
function views_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // @todo This is commented out until theming of secondary local tasks is
  //   fixed (see http://drupal.org/node/599706#comment-3620912). In the
  //   meantime, we add the tabs within views_ui_edit_form().
  /*
  if ($root_path == 'admin/structure/views/view/%') {
    module_load_include('inc', 'views_ui', 'includes/admin');
    $view = $router_item['page_arguments'][0];
    $tabs = views_ui_edit_page_display_tabs($view);
    if ($active_display = arg(6) && isset($tabs[$active_display])) {
      $tabs[$active_display]['#active'] = TRUE;
    }
    else {
      // Set the first one to active.
      foreach ($tabs as $id => $tab) {
        if (!isset($tab['#access']) || $tab['#access']) {
          $tabs[$id]['#active'] = TRUE;
          break;
        }
      }
    }
    if (!isset($data['tabs'][1]['output'])) {
      $data['tabs'][1]['output'] = array();
    }
    $data['tabs'][1]['output'] = array_merge($data['tabs'][1]['output'], $tabs);
    $data['tabs'][1]['count'] = count($data['tabs'][1]['output']);
  }
  */
}

/**
 * Implements hook_help().
 */
function views_ui_help($path, $arg = '') {
  switch ($path) {

  }
 // return '<pre>'.print_r(views_ui_get_wizards(),1);
}

/**
 * Implements hook_theme().
 */
function views_ui_theme() {
  $path = drupal_get_path('module', 'views');
  require_once DRUPAL_ROOT . "/$path/includes/admin.inc";

  return array(
    // edit a view
    'views_ui_display_tab_setting' => array(
      'variables' => array('description' => '', 'link' => '', 'settings_links' => array(), 'overridden' => FALSE, 'defaulted' => FALSE),
      'template' => 'views-ui-display-tab-setting',
      'path' => "$path/theme",
    ),
    'views_ui_display_tab_bucket' => array(
      'render element' => 'element',
      'template' => 'views-ui-display-tab-bucket',
      'path' => "$path/theme",
    ),
    'views_ui_edit_item' => array(
      'variables' => array('type' => NULL, 'view' => NULL, 'display' => NULL, 'no_fields' => FALSE),
      'template' => 'views-ui-edit-item',
      'path' => "$path/theme",
    ),
    'views_ui_rearrange_form' => array(
      'render element' => 'form',
    ),
    'views_ui_rearrange_filter_form' => array(
      'render element' => 'form',
      'file' => 'includes/admin.inc',
    ),

    // list views
    'views_ui_view_info' => array(
      'variables' => array('title' => '', 'paths' => array(), 'displays' => array()),
      'file' => "includes/admin.inc",
    ),

    // tab themes
    'views_tabset' => array(
      'variables' => array('tabs' => NULL),
    ),
    'views_tab' => array(
      'variables' => array('body' => NULL),
    ),
    'views_ui_reorder_displays_form' => array(
      'render element' => 'form',
      'file' => 'includes/admin.inc',
    ),


    // On behalf of a plugin
    'views_ui_style_plugin_table' => array(
      'render element' => 'form',
    ),

    // When previewing a view.
    'views_ui_view_preview_section' => array(
      'variables' => array('view' => NULL, 'section' => NULL, 'content' => NULL, 'links' => ''),
    ),

    // Generic container wrapper, to use instead of theme_container when an id
    // is not desired.
    'views_container' => array(
      'render element' => 'element',
      'file' => 'theme/theme.inc',
    ),
  );
}

/**
 * Specialized menu callback to load a view and check its locked status.
 *
 * @param $name
 *   The machine name of the view.
 *
 * @return
 *   The view object, with a "locked" property indicating whether or not
 *   someone else is already editing the view.
 */
function views_ui_cache_load($name) {
  ctools_include('object-cache');
  views_include('view');
  $view = ctools_object_cache_get('view', $name);

  if (empty($view)) {
    $view = views_get_view($name);

    if (!empty($view)) {
      // Check to see if someone else is already editing this view.
      $view->locked = ctools_object_cache_test('view', $view->name);
      // Set a flag to indicate that this view is being edited.
      // This flag will be used e.g. to determine whether strings
      // should be localized.
      $view->editing = TRUE;
    }
  }

  if (empty($view)) {
    return FALSE;
  }

  else {
    return $view;
  }
}

/**
 * Specialized cache function to add a flag to our view, include an appropriate
 * include, and cache more easily.
 */
function views_ui_cache_set(&$view) {
  if (!empty($view->locked)) {
    drupal_set_message(t('Changes cannot be made to a locked view.'), 'error');
    return;
  }
  ctools_include('object-cache');
  $view->changed = TRUE; // let any future object know that this view has changed.
  // Add the knowledge of the changed display, too.
  $view->changed_display[$view->current_display] = TRUE;

  // Unset handlers; we don't want to write these into the cache
  unset($view->display_handler);
  unset($view->current_display);
  unset($view->default_display);
  $view->query = NULL;
  foreach (array_keys($view->display) as $id) {
    unset($view->display[$id]->handler);
    unset($view->display[$id]->default_display);
  }
  ctools_object_cache_set('view', $view->name, $view);
}


/**
 * Specialized menu callback to load a view that is only a default
 * view.
 */
function views_ui_default_load($name) {
  $view = views_get_view($name);
  if ($view->type == t('Default')) {
    return $view;
  }

  return FALSE;
}

/**
 * Theme preprocess for views-view.tpl.php.
 */
function views_ui_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if (!empty($view->views_ui_context)) {
    $view->hide_admin_links = TRUE;
    $vars['admin_links'] = '';
    $vars['admin_links_raw'] = array();
    foreach (array('header', 'exposed', 'rows', 'pager', 'more', 'footer') as $section) {
      if (!empty($vars[$section])) {
        $vars[$section] = array(
          '#theme' => 'views_ui_view_preview_section',
          '#view' => $view,
          '#section' => $section,
          '#content' => $vars[$section],
          '#theme_wrappers' => array('views_container'),
          '#attributes' => array('class' => 'contextual-links-region'),
        );
        $vars[$section] = drupal_render($vars[$section]);
      }
    }
  }
}

/**
 * Theme preprocess for theme_views_ui_view_preview_section().
 *
 * @TODO
 *    Perhaps move this to includes/admin.inc or theme/theme.inc
 */
function template_preprocess_views_ui_view_preview_section(&$vars) {
  switch ($vars['section']) {
    case 'header':
      $vars['title'] = t('Header');
      $links = views_ui_view_preview_section_handler_links($vars['view'], $vars['section']);
      break;
    case 'empty':
      $vars['title'] = t('No results behavior');
      $links = views_ui_view_preview_section_handler_links($vars['view'], $vars['section']);
      break;
    case 'exposed':
      // @todo Sorts can be exposed too, so we may need a better title.
      $vars['title'] = t('Exposed Filters');
      $links = views_ui_view_preview_section_plugin_links($vars['view'], 'exposed_form');
      break;
    case 'rows':
      // @todo The title needs to depend on what is being viewed. Also, it is
      //   now discouraged to use the word "node" in user facing text.
      $vars['title'] = t('Nodes');
      $links = views_ui_view_preview_section_rows_links($vars['view']);
      break;
    case 'pager':
      $vars['title'] = t('Pager');
      $links = views_ui_view_preview_section_plugin_links($vars['view'], $vars['section']);
      break;
    case 'more':
      $vars['title'] = t('More');
      $links = views_ui_view_preview_section_display_category_links($vars['view'], 'use_more', $vars['title']);
      break;
    case 'footer':
      $vars['title'] = t('Footer');
      $links = views_ui_view_preview_section_handler_links($vars['view'], $vars['section']);
      break;
  }

  if ($links) {
    $build = array(
      '#prefix' => '<div class="contextual-links-wrapper">',
      '#suffix' => '</div>',
      '#theme' => 'links__contextual',
      '#links' => $links,
      '#attributes' => array('class' => array('contextual-links')),
      '#attached' => array(
        'library' => array(array('contextual', 'contextual-links')),
      ),
    );
    $vars['links'] = drupal_render($build);
  }
  $vars['theme_hook_suggestions'][] = 'views_ui_view_preview_section__' . $vars['section'];
}

/**
 * Returns the HTML for a section of a View being previewed within the Views UI.
 */
function theme_views_ui_view_preview_section($vars) {
  return '<h1 class="views_ui_view_preview_section_title">' . $vars['links'] . $vars['title'] . '</h1>' . $vars['content'];
}

/**
 * Returns contextual links for each handler of a certain section.
 *
 * @TODO
 *   Bring in relationships
 *   Refactor this function to use much stuff of views_ui_edit_form_get_bucket.
 *
 * @param $title
 *   Add a bolded title of this section.
 */
function views_ui_view_preview_section_handler_links($view, $type, $title = FALSE) {
  $display = $view->display_handler->display;
  $handlers = $view->display_handler->get_handlers($type);
  $links = array();

  $types = views_object_types();
  if ($title) {
    $links[$type . '-title'] = array(
      'title' => $types[$type]['title'],
      'attributes' => array('class' => array('views-ajax-link')),
    );
  }

  foreach ($handlers as $id => $handler) {
    $field_name = $handler->ui_name(TRUE);
    $links[$type . '-edit-' . $id] = array(
      'title' => t('Edit @section', array('@section' => $field_name)),
      'href' => "admin/structure/views/nojs/config-item/$view->name/$display->id/$type/$id",
      'attributes' => array('class' => array('views-ajax-link')),
    );
  }
  $links[$type . '-add'] = array(
    'title' => t('Add new'),
    'href' => "admin/structure/views/nojs/add-item/$view->name/$display->id/$type",
    'attributes' => array('class' => array('views-ajax-link')),
  );

  return $links;
}

/**
 * Returns a contextual link for the plugin type.
 */
function views_ui_view_preview_section_plugin_links($view, $type) {
  $display = $view->display_handler->display;
  $plugin = $view->display_handler->get_plugin($type);
  $plugin_name = '';
  $links = array(
    $type . '-edit' => array(
      'title' => t('Edit @section', array('@section' => $plugin_name)),
      'href' => "admin/structure/views/nojs/display/$view->name/$display->id/$type",
      'attributes' => array('class' => array('views-ajax-link')),
    ),
  );
  return $links;
}

/**
 * Returns a link to editing a certain display setting.
 */
function views_ui_view_preview_section_display_category_links($view, $type, $title) {
  $display = $view->display_handler->display;
  $links = array(
    $type . '-edit' => array(
      'title' => t('Edit @section', array('@section' => $title)),
      'href' => "admin/structure/views/nojs/display/$view->name/$display->id/$type",
      'attributes' => array('class' => array('views-ajax-link')),
    ),
  );
  
  return $links;
}

/**
 * Implements hook_contextual_links_view_alter().
 */
function views_ui_contextual_links_view_alter(&$element, $items) {
  // Hide every normal added contextual link on admin pages.
  if (path_is_admin(current_path())) {
    // Views build's his own renderable array so they don't get removed.
    $element['#links'] = array();
  }
}

/**
 * Returns all contextual links for the main content part of the view.
 */
function views_ui_view_preview_section_rows_links($view) {
  $display = $view->display_handler->display;
  $links = array();
  $links = array_merge($links, views_ui_view_preview_section_handler_links($view, 'filter', TRUE));
  $links = array_merge($links, views_ui_view_preview_section_handler_links($view, 'field', TRUE));
  $links = array_merge($links, views_ui_view_preview_section_handler_links($view, 'sort', TRUE));
  $links = array_merge($links, views_ui_view_preview_section_handler_links($view, 'argument', TRUE));
  $links = array_merge($links, views_ui_view_preview_section_handler_links($view, 'relationship', TRUE));

  return $links;
}


/**
 * Implments hook_ctools_plugin_directory().
 *
 * Views UI provides wizard plugins on behalf of core base tables.
 */
function views_ui_ctools_plugin_directory($module, $plugin) {
  if ($module == 'views_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Fetch metadata on a specific views ui wizard plugin.
 *
 * @param $wizard_type
 *   Name of a wizard, or name of a base table.
 *
 * @return
 *   An array with information about the requested wizard type.
 */
function views_ui_get_wizard($wizard_type) {
  ctools_include('plugins');
  $w = ctools_get_plugins('views_ui', 'views_wizard', $wizard_type);
  // @todo - handle this via an alter hook instead.
  if (!$w) {
    // Must be a base table using the default wizard plugin.
    $base_tables = views_fetch_base_tables();
    if (!empty($base_tables[$wizard_type])) {
      $w = views_ui_views_wizard_defaults();
      $w['base_table'] = $wizard_type;
      $w['title'] = $base_tables[$wizard_type]['title'];
    }
  }
  return $w;
}

/**
 * Fetch metadata for all content_type plugins.
 *
 * @return
 *   An array of arrays with information about all available views wizards.
 */
function views_ui_get_wizards() {
  ctools_include('plugins');
  $wizard_plugins = ctools_get_plugins('views_ui', 'views_wizard');
  $wizard_tables = array();
  foreach ($wizard_plugins as $name => $info) {
    $wizard_tables[$info['base_table']] = TRUE;
  }
  $base_tables = views_fetch_base_tables();
  $default_wizard = views_ui_views_wizard_defaults();
  // Find base tables with no wizard.
  // @todo - handle this via an alter hook for plugins?
  foreach ($base_tables as $table => $info) {
    if (!isset($wizard_tables[$table])) {
      $w = $default_wizard;
      $w['title'] = $info['title'];
      $w['base_table'] = $table;
      $wizard_plugins[$table] = $w;
    }
  }
  return $wizard_plugins;
}

/**
 * Helper function to define the default values for a Views wizard plugin.
 *
 * @return
 *   An array of defaults for a views wizard.
 */
function views_ui_views_wizard_defaults() {
  return array(
    // The children may, for example, be a different variant for each node type.
    'get children' => NULL,
    'get child' => NULL,
    // title and base table must be populated.  They are empty here just
    // so they are documented.
    'title' => '',
    'base_table' => NULL,
    // This is a callback that takes the wizard as argument and returns
    // an instantiazed Views UI form wizard object.
    'get_instance' => 'views_ui_get_form_wizard_instance',
    'form_wizard_class' => array(
      'file' => 'views_ui_base_views_wizard',
      'class' => 'ViewsUiBaseViewsWizard',
    ),
  );
}

/**
 * Inform CTools that the Views wizard plugin can have child plugins.
 */
function views_ui_ctools_plugin_type() {
  return array(
    'views_wizard' => array(
      'child plugins' => TRUE,
      'classes' => array(
        'form_wizard_class',
      ),
      'defaults' => views_ui_views_wizard_defaults(),
    ),
  );
}

function views_ui_get_form_wizard_instance($wizard) {
  if (isset($wizard['form_wizard_class']['class'])) {
    $class = $wizard['form_wizard_class']['class'];
    return new $class($wizard);
  }
  else {
    return new ViewsUiBaseViewsWizard($wizard);
  }
}

/**
 * Menu callback; handles AJAX form submissions similar to ajax_form_callback(), but can be used for uncached forms.
 *
 * ajax_form_callback(), the menu callback for the system/ajax path, requires
 * the form to be retrievable from the form cache, because it lacks a trusted
 * $form_id argument with which to call drupal_retrieve_form(). When AJAX is
 * wanted on a non-cacheable form, #ajax['path'] can be set to a path whose
 * menu router item's 'page callback' is this function, and whose
 * 'page arguments' is the form id, optionally followed by additional build
 * arguments, as expected by drupal_get_form().
 *
 * The same caution must be used when defining a hook_menu() entry with this
 * page callback as is used when defining a hook_menu() entry with the
 * 'drupal_get_form' page callback: a 'page arguments' must be specified with a
 * literal value as the first argument, because $form_id determines which form
 * builder function gets called, so must be safe from user tampering.
 *
 * @see drupal_get_form()
 * @see ajax_form_callback()
 * @see http://drupal.org/node/774876
 */
function views_ui_ajax_get_form($form_id) {
  // @see ajax_get_form()
  $form_state = array(
    'no_redirect' => TRUE,
  );
  $form_state['rebuild_info']['copy']['#build_id'] = TRUE;
  $form_state['rebuild_info']['copy']['#action'] = TRUE;

  // @see drupal_get_form()
  $args = func_get_args();
  array_shift($args);
  $form_state['build_info']['args'] = $args;
  $form = drupal_build_form($form_id, $form_state);

  // @see ajax_form_callback()
  if (!empty($form_state['triggering_element'])) {
    $callback = $form_state['triggering_element']['#ajax']['callback'];
  }
  if (!empty($callback) && function_exists($callback)) {
    return $callback($form, $form_state);
  }
}
