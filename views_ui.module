<?php
// $Id: views_ui.module,v 1.109.6.13 2010/10/26 19:06:26 dereine Exp $
/**
 * @file views_ui.module
 * Provide structure for the administrative interface to Views.
 */

/**
 * Implements hook_menu().
 */
function views_ui_menu() {
  $items = array();

  //module_load_include('inc', 'views_ui', 'includes/admin');

  // Minor code reduction technique.
  $base = array(
    'access callback' => 'user_access',
    'access arguments' => array('administer views'),
    'file' => 'includes/admin.inc',
  );

  // Top-level Views module pages (not tied to a particular View).
  $items['admin/structure/views'] = array(
    'title' => 'Views',
    'description' => 'Manage customized lists of content.',
    'page callback' => 'views_ui_list_views',
  ) + $base;
  $items['admin/structure/views/list'] = array(
    'title' => 'List',
    'page callback' => 'views_ui_list_views',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => '-1'
  ) + $base;
  $items['admin/structure/views/add'] = array(
    'title' => 'Add view',
    'description' => 'Add new view',
    'page callback' => 'views_ui_add_page',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/import'] = array(
    'title' => 'Import view from code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_import_page'),
    'access callback' => 'views_import_access',
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/tools'] = array(
    'title' => 'Tools',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_admin_tools'),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  // Other modules might want to extend Tools with secondary tabs. Add the
  // default task here, so they don't have to.
  $items['admin/structure/views/tools/basic'] = array(
    'title' => 'Basic',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  // The primary Edit View page. Secondary tabs for each Display are added in
  // view_ui_menu_local_tasks_alter().
  $items['admin/structure/views/view/%views_ui_cache'] = array(
    'title callback' => 'views_ui_edit_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_edit_form', 4),
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  // Additional pages for acting on a View.
  $items['admin/structure/views/view/%views_ui_cache/analyze'] = array(
    'title' => 'Analyze',
    'page callback' => 'views_ui_analyze_view',
    'page arguments' => array(FALSE, 4),
    // @todo Not sure yet if "Analyze" makes sense as a primary tab. Trying it.
    'type' => MENU_LOCAL_TASK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_export_page', 4),
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/clone'] = array(
    'title' => 'Clone',
    'page callback' => 'views_ui_clone_page',
    'page arguments' => array(4),
    'type' => MENU_LOCAL_ACTION,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/break-lock'] = array(
    'title' => 'Break lock',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_break_lock_confirm', 4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_default/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'views_ui_enable_page',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_default/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'views_ui_disable_page',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
  ) + $base;
  $items['admin/structure/views/view/%views_ui_cache/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_ui_delete_confirm', 4),
    'type' => MENU_CALLBACK,
  ) + $base;

  // Nojs/Ajax callbacks used while editing a View.
  $ajax_callbacks = array(
    'details' => 'views_ui_edit_details',
    'preview' => 'views_ui_preview',
    '%' => 'views_ui_ajax_form',
    // @todo Moved "Analyze" to a primary tab, but may restore it to a AJAX
    //   callback again.
    //'analyze' => 'views_ui_analyze_view',
  );
  foreach ($ajax_callbacks as $menu => $menu_callback) {
    $items['admin/structure/views/nojs/' . $menu . '/%views_ui_cache'] = array(
      'page callback' => $menu_callback,
      'page arguments' => $menu === '%' ? array(FALSE, 4, 5) : array(FALSE, 5),
      'type' => MENU_CALLBACK,
    ) + $base;
    $items['admin/structure/views/ajax/' . $menu . '/%views_ui_cache'] = array(
      'page callback' => $menu_callback,
      'page arguments' => $menu === '%' ? array(TRUE, 4, 5) : array(TRUE, 5),
      'delivery callback' => 'ajax_deliver',
      'type' => MENU_CALLBACK,
    ) + $base;
  }

  // Autocomplete callback for tagging a View.
  // @todo Are there any other modules relying on this path? If not, change to
  //   'admin/structure/views/ajax/autocomplete/tag'.
  $items['admin/views/ajax/autocomplete/tag'] = array(
    'page callback' => 'views_ui_autocomplete_tag',
    'type' => MENU_CALLBACK,
  ) + $base;

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Adds secondary tabs for navigating across Displays when editing a View. Since
 * each view contains its own set of displays, doing this here instead of in
 * hook_menu() reduces bloat in the {menu_links} table, and avoids requiring a
 * menu rebuild every time a display is added or removed.
 */
function views_ui_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // @todo This is commented out until theming of secondary local tasks is
  //   fixed (see http://drupal.org/node/599706#comment-3620912). In the
  //   meantime, we add the tabs within views_ui_edit_form().
  /*
  if ($root_path == 'admin/structure/views/view/%') {
    module_load_include('inc', 'views_ui', 'includes/admin');
    $view = $router_item['page_arguments'][0];
    $tabs = views_ui_edit_page_display_tabs($view);
    if ($active_display = arg(6) && isset($tabs[$active_display])) {
      $tabs[$active_display]['#active'] = TRUE;
    }
    else {
      // Set the first one to active.
      foreach ($tabs as $id => $tab) {
        if (!isset($tab['#access']) || $tab['#access']) {
          $tabs[$id]['#active'] = TRUE;
          break;
        }
      }
    }
    if (!isset($data['tabs'][1]['output'])) {
      $data['tabs'][1]['output'] = array();
    }
    $data['tabs'][1]['output'] = array_merge($data['tabs'][1]['output'], $tabs);
    $data['tabs'][1]['count'] = count($data['tabs'][1]['output']);
  }
  */
}

/**
 * Implements hook_help().
 */
function views_ui_help($path, $arg = '') {
  switch ($path) {

  }
 // return '<pre>'.print_r(views_ui_get_wizards(),1);
}

/**
 * Implements hook_theme().
 */
function views_ui_theme() {
  $path = drupal_get_path('module', 'views');
  require_once DRUPAL_ROOT . "/$path/includes/admin.inc";

  return array(
    // edit a view
    'views_ui_edit_display_tab' => array(
      'variables' => array('display_id' => NULL, 'view' => NULL, 'display' => NULL),
      'template' => 'views-ui-edit-display-tab',
      'path' => "$path/theme",
    ),
    'views_ui_edit_item' => array(
      'variables' => array('type' => NULL, 'view' => NULL, 'display' => NULL, 'no_fields' => FALSE),
      'template' => 'views-ui-edit-item',
      'path' => "$path/theme",
    ),
    'views_ui_rearrange_form' => array(
      'render element' => 'form',
    ),

    // list views
    'views_ui_view_info' => array(
      'variables' => array('title' => '', 'paths' => array(), 'displays' => array()),
      'file' => "includes/admin.inc",
    ),

    // tab themes
    'views_tabset' => array(
      'variables' => array('tabs' => NULL),
    ),
    'views_tab' => array(
      'variables' => array('body' => NULL),
    ),

    // On behalf of a plugin
    'views_ui_style_plugin_table' => array(
      'render element' => 'form',
    ),

    // When previewing a view.
    'views_ui_view_preview_section' => array(
      'variables' => array('view' => NULL, 'section' => NULL, 'content' => NULL),
    ),
  );
}

/**
 * Specialized menu callback to load a view and check its locked status.
 *
 * @param $name
 *   The machine name of the view.
 *
 * @return
 *   The view object, with a "locked" property indicating whether or not
 *   someone else is already editing the view.
 */
function views_ui_cache_load($name) {
  ctools_include('object-cache');
  views_include('view');
  $view = ctools_object_cache_get('view', $name);

  if (empty($view)) {
    $view = views_get_view($name);

    if (!empty($view)) {
      // Check to see if someone else is already editing this view.
      $view->locked = ctools_object_cache_test('view', $view->name);
    }
  }

  if (empty($view)) {
    return FALSE;
  }

  else {
    return $view;
  }
}

/**
 * Specialized cache function to add a flag to our view, include an appropriate
 * include, and cache more easily.
 */
function views_ui_cache_set(&$view) {
  if (!empty($view->locked)) {
    drupal_set_message(t('Changes cannot be made to a locked view.'), 'error');
    return;
  }
  ctools_include('object-cache');
  $view->changed = TRUE; // let any future object know that this view has changed.

  // Unset handlers; we don't want to write these into the cache
  unset($view->display_handler);
  unset($view->current_display);
  unset($view->default_display);
  $view->query = NULL;
  foreach (array_keys($view->display) as $id) {
    unset($view->display[$id]->handler);
    unset($view->display[$id]->default_display);
  }
  ctools_object_cache_set('view', $view->name, $view);
}


/**
 * Specialized menu callback to load a view that is only a default
 * view.
 */
function views_ui_default_load($name) {
  $view = views_get_view($name);
  if ($view->type == t('Default')) {
    return $view;
  }

  return FALSE;
}

/**
 * Theme preprocess for views-view.tpl.php.
 */
function views_ui_preprocess_views_view(&$vars) {
  $view = $vars['view'];
  if (!empty($view->views_ui_context)) {
    $view->hide_admin_links = TRUE;
    $vars['admin_links'] = '';
    $vars['admin_links_raw'] = array();
    foreach (array('header', 'exposed', 'rows', 'pager', 'more', 'footer') as $section) {
      if (!empty($vars[$section])) {
        $vars[$section] = theme('views_ui_view_preview_section', array('view' => $view, 'section' => $section, 'content' => $vars[$section]));
      }
    }
  }
}

/**
 * Theme preprocess for theme_views_ui_view_preview_section().
 */
function template_preprocess_views_ui_view_preview_section(&$vars) {
  switch ($vars['section']) {
    case 'header':
      $vars['title'] = t('Header');
      break;
    case 'exposed':
      // @todo Sorts can be exposed too, so we may need a better title.
      $vars['title'] = t('Exposed Filters');
      break;
    case 'rows':
      // @todo The title needs to depend on what is being viewed. Also, it is
      //   now discouraged to use the word "node" in user facing text.
      $vars['title'] = t('Nodes');
      break;
    case 'pager':
      $vars['title'] = t('Pager');
      break;
    case 'more':
      $vars['title'] = t('More');
      break;
    case 'footer':
      $vars['title'] = t('Footer');
      break;
  }
  $vars['theme_hook_suggestions'][] = 'views_ui_view_preview_section__' . $vars['section'];
}

/**
 * Returns the HTML for a section of a View being previewed within the Views UI.
 */
function theme_views_ui_view_preview_section($vars) {
  return '<h2 class="views_ui_view_preview_section_title">' . $vars['title'] . '</h2>' . $vars['content'];
}

/**
 * Implments hook_ctools_plugin_directory().
 *
 * Views UI provides wizard plugins on behalf of core base tables.
 */
function views_ui_ctools_plugin_directory($module, $plugin) {
  if ($module == 'views_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Fetch metadata on a specific views ui wizard plugin.
 *
 * @param $wizard type
 *   Name of a panel content type.
 *
 * @return
 *   An array with information about the requested wizard type.
 */
function views_ui_get_wizard($wizard) {
  ctools_include('plugins');
  return ctools_get_plugins('views_ui', 'views_wizard', $wizard);
}

/**
 * Fetch metadata for all content_type plugins.
 *
 * @return
 *   An array of arrays with information about all available views wizards.
 */
function views_ui_get_wizards() {
  ctools_include('plugins');
  return ctools_get_plugins('views_ui', 'views_wizard');
}

/**
 * Inform CTools that the Views wizard plugin can have child plugins.
 */
function views_ui_ctools_plugin_type() {
  return array(
    'views_wizard' => array(
      'child plugins' => TRUE,
      'classes' => array(
        'form_ui_class_file',
      ),
      'defaults' => array(
        // The children may, for example, be a different variant for each node type.
        'get children' => NULL,
        'get child' => NULL,
        'get_instance' => 'views_ui_get_default_wizard_instance',
      ),
    ),
  );
}

function views_ui_get_default_wizard_instance($wizard) {
  return new ViewsUiBaseViewsWizard($wizard['base_table'], $wizard['filters']);
}
